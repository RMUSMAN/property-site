@* Remove this section if you are using bundling *@

@{
    Layout = "~/_Accounts.cshtml";
    Page.Title = "Register";

    // Initialize general page variables
    
    var username="";
    var email = "";
    var phone= "";
    var password = "";
    var mode="Unfeatured";
    var state="Active";

    // Setup validation
    Validation.RequireField("email", "You must specify an email address.");
    Validation.RequireField("password", "Password cannot be blank.");
   

    // If this is a POST request, validate and process data
    if (IsPost) {
       
       username = Request.Form["username"];
        email = Request.Form["email"];
        phone = Request.Form["phone"];
        password = Request.Form["password"];
      

        // Validate the user's captcha answer
        // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
        //     ModelState.AddError("recaptcha", "Captcha response was not correct");
        // }

        // If all information is valid, create a new account
        if (Validation.IsValid()) {
            // Insert a new user into the database
            var db = Database.Open("StarterSite");

            // Check if user already exists
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null) {
                // Insert email into the profile table
                db.Execute("INSERT INTO UserProfile (Email , Name , Phone , STATE , MODE) VALUES (@0 , @1 , @2 , @3 , @4)", email , username , phone , state , mode);

                // Create and associate a new entry in the membership database.
                // If successful, continue processing the request
                try {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    if (requireEmailConfirmation) {
                        var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                        var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));

                        WebMail.Send(
                            to: email,
                            subject: "Please confirm your account",
                            body: "Your confirmation code is: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> to activate your account."
                        );
                    }

                    if (requireEmailConfirmation) {
                        // Thank the user for registering and let them know an email is on its way
                        Response.Redirect("~/Account/Thanks");
                    } else {
                        // Navigate back to the homepage and exit
                        WebSecurity.Login(email, password);

                        Response.Redirect("~/EditProfile.cshtml");
                    }
                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
            } else {
                // User already exists
                ModelState.AddFormError("Email address is already in use.");
            }
        }
    }
}





<form  method="post"  >


     @Html.ValidationSummary("Account creation was unsuccessful.", excludeFieldErrors: true, htmlAttributes: null)


      <input id="username" class="w3-input  w3-border w3-border-blue w3-round" style="margin-bottom: 5px;" name="username" type="text" value="@username" placeholder="Enter Name" pattern="^\s*[A-Za-z0-9]+(?:\s+[A-Za-z0-9]+)*\s*$" title="Only Alphanumeric are are allowed" maxlength="20" @Validation.For("username")   required>
     @Html.ValidationMessage("username")
   




      <input id="email" class="w3-input  w3-border w3-border-blue w3-round " name="email" type="email" style="margin-bottom: 5px;" value="@email" placeholder="Email" style="border-color:teal transparent"  @Validation.For("email") required>
    @Html.ValidationMessage("email")
   


      <input id="phone" class="w3-input  w3-border w3-border-blue w3-round " name="phone" type="text" value="@phone" style="margin-bottom: 5px;" placeholder="Phone" pattern="^((\+92)|(0092))-{0,1}\d{3}-{0,1}\d{7}$|^\d{11}$|^\d{4}-\d{7}$" title="Exampe: 03009979123"  @Validation.For("phone") 
         required>
    @Html.ValidationMessage("phone")
        


      <input id="password" class="w3-input  w3-border w3-border-blue w3-round" name="password" type="password" value="@password" style="margin-bottom: 5px;"  @Validation.For("password") placeholder="Enter password" pattern="^(?=.*\d).{6,}$" title="mininum password length 6 characters" maxlength="20"  required>
     @Html.ValidationMessage("password")
  


 <button type="submit" class="w3-btn w3-blue w3-border-blue w3-card-4" style="margin-bottom: 5px;">Register</button>



</form>









<!------




---->